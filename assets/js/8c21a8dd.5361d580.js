"use strict";(self.webpackChunkreact_native_global_components_docs=self.webpackChunkreact_native_global_components_docs||[]).push([[565],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||r;return n?o.createElement(f,l(l({ref:t},u),{},{components:n})):o.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6374:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={},l="useUpdateGlobalComponentState",i={unversionedId:"hooks/useUpdateGlobalComponentState",id:"hooks/useUpdateGlobalComponentState",title:"useUpdateGlobalComponentState",description:"Overview",source:"@site/docs/hooks/useUpdateGlobalComponentState.md",sourceDirName:"hooks",slug:"/hooks/useUpdateGlobalComponentState",permalink:"/docs/hooks/useUpdateGlobalComponentState",draft:!1,editUrl:"https://github.com/JeongShin/react-native-global-components/tree/main/packages/create-docusaurus/templates/shared/docs/hooks/useUpdateGlobalComponentState.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useSlideAnimationStyle",permalink:"/docs/hooks/useSlideAnimationStyle"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"<code>addHideAnimation</code>",id:"addhideanimation",level:3},{value:"<code>hide</code>",id:"hide",level:3}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"useupdateglobalcomponentstate"},"useUpdateGlobalComponentState"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useUpdateGlobalComponentState")," is core hook for global component state management."),(0,a.kt)("p",null,"Here's how context looks"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface UpdateStateProps {\n  hide: () => Promise<void>;\n  addHideAnimation: (animation: () => Promise<void>) => void;\n}\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"addhideanimation"},(0,a.kt)("inlineCode",{parentName:"h3"},"addHideAnimation")),(0,a.kt)("p",null,"For example, if you want to add hide animation before component dismissed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="MyCustomPopup.tsx"',title:'"MyCustomPopup.tsx"'},"import {\n  createPopup,\n  useUpdateGlobalComponentState,\n} from 'react-native-global-components';\n\nconst MyCustomPopup = () => {\n  const { addHideAnimation, hide } = useUpdateGlobalComponentState();\n\n  useEffect(() => {\n    opacity.value = withTiming(1);\n\n    addHideAnimation(() => {\n      return new Promise((resolve) => {\n        opacity.value = withTiming(0, {}, () => runOnJS(resolve)());\n      });\n    });\n  }, []);\n\n  return <Button onPress={() => hide()} />;\n};\n\nexport default createPopup(MyCustomPopup);\n")),(0,a.kt)("p",null,"then all registered animations on mount will triggered when ",(0,a.kt)("inlineCode",{parentName:"p"},"hide")," called parallelly with ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise.all")),(0,a.kt)("h3",{id:"hide"},(0,a.kt)("inlineCode",{parentName:"h3"},"hide")),(0,a.kt)("p",null,"Hide method is used to hide current component."),(0,a.kt)("p",null,"For example, if you have callback on button pressed, you should call ",(0,a.kt)("inlineCode",{parentName:"p"},"hide")," after to dismiss popup."),(0,a.kt)("p",null,"Unless, your component will be visible forever!! \ud83e\udd2f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="MyCustomPopup.tsx"',title:'"MyCustomPopup.tsx"'},"import {\n  createPopup,\n  useUpdateGlobalComponentState,\n} from 'react-native-global-components';\n\nconst MyCustomPopup: React.FC<{ callback: () => void }> = ({ callback }) => {\n  const { hide } = useUpdateGlobalComponentState();\n\n  return (\n    <Button\n      onPress={() => {\n        callback();\n        hide(); // Don't forget!!\n      }}\n    />\n  );\n};\n\nexport default createPopup(MyCustomPopup);\n")))}c.isMDXComponent=!0}}]);