"use strict";(self.webpackChunkreact_native_global_components_docs=self.webpackChunkreact_native_global_components_docs||[]).push([[496],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(t),d=a,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4833:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={},i="Customize",p={unversionedId:"Guides/Customize",id:"Guides/Customize",title:"Customize",description:"Reusing UIs",source:"@site/docs/Guides/Customize.mdx",sourceDirName:"Guides",slug:"/Guides/Customize",permalink:"/docs/Guides/Customize",draft:!1,editUrl:"https://github.com/JeongShin/react-native-global-components/tree/main/packages/create-docusaurus/templates/shared/docs/Guides/Customize.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"createPopup \u2b50\ufe0f",permalink:"/docs/API/createPopup"},next:{title:"ActionSheetUI",permalink:"/docs/UIs/ActionSheetUI"}},s={},l=[{value:"Reusing UIs",id:"reusing-uis",level:2},{value:"Create UI",id:"create-ui",level:2},{value:"1. create popup",id:"1-create-popup",level:3},{value:"2. render portal",id:"2-render-portal",level:3},{value:"3. use anywhere",id:"3-use-anywhere",level:3},{value:"+ add animation",id:"-add-animation",level:3},{value:"+ with PopupManager",id:"-with-popupmanager",level:3}],u={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"customize"},"Customize"),(0,a.kt)("h2",{id:"reusing-uis"},"Reusing UIs"),(0,a.kt)("p",null,"Override UI props see example below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="SimpleSnackbar.tsx"',title:'"SimpleSnackbar.tsx"'},"import {\n  SimpleSnackbarUI,\n  SimpleSnackbarProps,\n  createPopup,\n} from 'react-native-global-components';\n\nconst styles: SimpleSnackbarProps['styles'] = StyleSheet.create({\n  // override default styles\n});\n\nexport default createPopup((props: SimpleSnackbarProps) => (\n  <SimpleSnackbarUI {...props} styles={styles} />\n));\n")),(0,a.kt)("p",null,"or you can create your own UI"),(0,a.kt)("h2",{id:"create-ui"},"Create UI"),(0,a.kt)("h3",{id:"1-create-popup"},"1. create popup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Popup.tsx"',title:'"Popup.tsx"'},"import { createPopup } from 'react-native-global-components';\n\n// show method requires props for first argument\n// and types will automatically inferred\ninterface PopupUIProps {\n  title: string;\n}\n\nconst PopupUI = (props: PopupUIProps) => {\n  return <View>{}</View>;\n};\n\nconst Popup = createPopup(PopupUI);\n\n// Popup.show({ title: 'hi~' });\n\nexport default Popup;\n")),(0,a.kt)("h3",{id:"2-render-portal"},"2. render portal"),(0,a.kt)("p",null,"decide where to render your Popup when ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," called"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"import Popup from './Popup';\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen />\n        <Popup.Portal />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n")),(0,a.kt)("h3",{id:"3-use-anywhere"},"3. use anywhere"),(0,a.kt)("p",null,"then, ready to go"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="MyCustomHook.ts"',title:'"MyCustomHook.ts"'},"import Popup from './Popup';\n\nconst MyCustomHook = () => {\n  const myLogic = async () => {\n    await logic();\n    Popup.show({ title: 'done! \ud83d\ude0b' });\n  };\n\n  return { myLogic };\n};\n")),(0,a.kt)("h3",{id:"-add-animation"},"+ add animation"),(0,a.kt)("p",null,"example with reanimated"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect } from 'react';\nimport Animated, {\n  runOnJS,\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n  WithTimingConfig,\n} from 'react-native-reanimated';\n\ninterface PopupUIProps {\n  title: string;\n}\n\nconst PopupUI = (props: PopupUIProps) => {\n  const { addHideAnimation, hide } = usePopupContext();\n\n  const animation = useSharedValue(translateY);\n\n  const style = useAnimatedStyle(\n    () => ({\n      transform: [\n        {\n          translateY: animation.value,\n        },\n      ],\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    // 1. start animation on mount\n    animation.value = withTiming(0, animationConfig);\n\n    // 2. register hide animation\n    addHideAnimation(() => {\n      return new Promise<void>((resolve) => {\n        const callback = () => {\n          resolve();\n        };\n\n        animation.value = withTiming(translateY, animationConfig, () =>\n          runOnJS(callback)(),\n        );\n      });\n    });\n\n    // 3. clean up to reset animation value\n    return () => {\n      animation.value = translateY;\n    };\n  }, []);\n\n  return (\n    <Animated.View style={style}>\n      <Button\n        title={'Hide'}\n        onPress={() => {\n          hide(); // hide popup with animation\n        }}\n      />\n    </Animated.View>\n  );\n};\n")),(0,a.kt)("h3",{id:"-with-popupmanager"},"+ with PopupManager"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="MyCustomHook.ts"',title:'"MyCustomHook.ts"'},"import Popup from './Popup';\nimport { PopupManager } from 'react-native-global-components';\n\nconst MyCustomHook = () => {\n  const myLogic = async () => {\n    try {\n      await logic();\n      Popup.show({ title: 'done! \ud83d\ude0b' });\n    } catch (error) {\n      PopupManager.hideAll();\n      Popup.show({ title: 'fatal error \ud83e\udd2f' });\n    }\n  };\n\n  return { myLogic };\n};\n")))}c.isMDXComponent=!0}}]);