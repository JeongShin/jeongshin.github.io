"use strict";(self.webpackChunkreact_native_global_components_docs=self.webpackChunkreact_native_global_components_docs||[]).push([[9565],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6374:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={},i="useUpdateGlobalComponentState",l={unversionedId:"hooks/useUpdateGlobalComponentState",id:"hooks/useUpdateGlobalComponentState",title:"useUpdateGlobalComponentState",description:"Description",source:"@site/docs/hooks/useUpdateGlobalComponentState.md",sourceDirName:"hooks",slug:"/hooks/useUpdateGlobalComponentState",permalink:"/react-native-global-components/ko/docs/hooks/useUpdateGlobalComponentState",draft:!1,editUrl:"https://github.com/JeongShin/react-native-global-components/tree/main/packages/create-docusaurus/templates/shared/docs/hooks/useUpdateGlobalComponentState.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useSlideAnimation",permalink:"/react-native-global-components/ko/docs/hooks/useSlideAnimation"}},p={},s=[{value:"Description",id:"description",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"useupdateglobalcomponentstate"},"useUpdateGlobalComponentState"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useUpdateGlobalComponentState")," is core hook for global component state management."),(0,r.kt)("p",null,"Here's how it looks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface UpdateStateProps {\n  hide: () => Promise<void>;\n  addHideAnimation: (animation: () => Promise<void>) => void;\n}\n")),(0,r.kt)("p",null,"For example, if you want to ",(0,r.kt)("strong",{parentName:"p"},"add hide animation before component completely dismissed")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="YourCustomUI.tsx"',title:'"YourCustomUI.tsx"'},"import {\n  createPopup,\n  useUpdateGlobalComponentState,\n} from 'react-native-global-components';\n\nconst MyCustomUI = () => {\n  const { addHideAnimation, hide } = useUpdateGlobalComponentState();\n\n  useEffect(() => {\n    opacity.value = withTiming(1);\n\n    addHideAnimation(() => {\n      return new Promise((resolve) => {\n        opacity.value = withTiming(0, {}, () => runOnJS(resolve)());\n      });\n    });\n  }, []);\n\n  return <Button onPress={() => hide()} />;\n};\n\nexport default createPopup(MyCustomUI);\n")),(0,r.kt)("p",null,"then"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"asynchronous animation registered on mounted"),(0,r.kt)("li",{parentName:"ul"},"all registered animations called"),(0,r.kt)("li",{parentName:"ul"},"component unmount when all")))}u.isMDXComponent=!0}}]);